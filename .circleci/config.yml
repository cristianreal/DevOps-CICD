version: 2.1
jobs:
  test:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: "Tests backend"
          command: |
            cd ${HOME}/project/code/backend
            docker build -t christianreal/backend-nodejs:${CIRCLE_SHA1} .
            docker run --name service-nodejs --env-file env.list -p 5000:5000 -d christianreal/backend-nodejs:${CIRCLE_SHA1}
            docker exec -it service-nodejs npm test 
      - run:
          name: "Test Frontend"
          command: |
            cd ${HOME}/project/code/client
            docker build -t christianreal/frontend-vuejs:test1${CIRCLE_SHA1} -f Dockerfile.test . 
  continous_integration_delivery:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: "Build Image Backend"
          command: |
            cd ${HOME}/project/code/backend
            docker build -t christianreal/backend-nodejs:${CIRCLE_SHA1} . 
      - run:
          name: "Build Image Frontend"
          command: |
            cd ${HOME}/project/code/client
            docker build -t christianreal/frontend-vuejs:${CIRCLE_SHA1} . 
      - run:
          name: "Test Backend"
          command: |
            cd ${HOME}/project/code/backend
            docker run --name service-nodejs --env-file env.list -p 5000:5000 -d christianreal/backend-nodejs:${CIRCLE_SHA1}
            docker exec -it service-nodejs npm test 
      - run:
          name: "Test Frontend"
          command: |
            ${HOME}/project/code/client
            docker build -t christianreal/frontend-vuejs:test1${CIRCLE_SHA1} -f Dockerfile.test . 
      - run:
          name: "Push images to registry"
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push christianreal/backend-nodejs:${CIRCLE_SHA1}
            docker push christianreal/frontend-vuejs:${CIRCLE_SHA1}
  continous_deployment:
    docker: 
      - image: google/cloud-sdk    
    steps:      
      - checkout
      - run:          
          name: Auth gCloud SDK 
          command: |
            #!/bin/sh
            set -e
            echo ${CREDENTIALS} > ${HOME}/gcp-key.json
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
            gcloud --quiet config set project ${PROJECT_ID}
            gcloud config set compute/zone ${GOOGLE_COMPUTE_ZONE}
      - run:          
          name: Apply kubernetes files to the cluster
          command: |
            for cluster in  $(gcloud container clusters list --project ${PROJECT_ID} --filter devops-ci-cd --format="value(selfLink.scope(clusters))")
            do
              export CLUSTER=$cluster
            done
            gcloud container clusters get-credentials ${CLUSTER} --zone ${GOOGLE_COMPUTE_ZONE} --project ${PROJECT_ID}
            kubectl apply -f deployment/K8/deployments
            kubectl set image deployment/deployment-nodejs nodejs-container=christianreal/backend-nodejs:${CIRCLE_SHA1} --record
            kubectl set image deployment/deployment-vuejs vuejs-container=christianreal/frontend-vuejs:${CIRCLE_SHA1} --record
            kubectl apply -f deployment/K8/services/clusterip
            kubectl apply -f deployment/K8/services/service-ingress.yml 
  infrastructure_deployment:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: "Instalar terraform & Crear archivo de credenciales."  
          command: |
            sudo bash deployment/Terraform/script.sh
            echo ${CREDENTIALS} > ${HOME}/gcloud-key.json
      - run:
          name: "Desplegar infraestructura con terraform"
          command: |
            cd deployment/Terraform
            export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-key.json
            export TF_VAR_project_id=${PROJECT_ID}
            terraform init 
            terraform plan -out plan.out
            terraform apply plan.out
  configure_infrastructure:
    docker: 
      - image: google/cloud-sdk    
    steps:      
      - checkout
      - run:          
          name: Auth gCloud SDK 
          command: |
            #!/bin/sh
            set -e
            echo ${CREDENTIALS} > ${HOME}/gcp-key.json
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
            gcloud --quiet config set project ${PROJECT_ID}
            gcloud config set compute/zone ${GOOGLE_COMPUTE_ZONE}
      - run:          
          name: Apply kubernetes files to the cluster
          command: |
            for cluster in  $(gcloud container clusters list --project ${PROJECT_ID} --filter devops-ci-cd --format="value(selfLink.scope(clusters))")
            do
              export CLUSTER=$cluster
            done
            gcloud container clusters get-credentials ${CLUSTER} --zone ${GOOGLE_COMPUTE_ZONE} --project ${PROJECT_ID}
            kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/cloud/deploy.yaml
            export ip=$(kubectl get svc --namespace ingress-nginx ingress-nginx-controller  --template="{{range .status.loadBalancer.ingress}}{{.ip}}{{end}}");
            if  [ -z "$ip" ]
            then  
              external_ip=""; while [ -z $external_ip ]; do echo "Waiting for end point..."; external_ip=$(kubectl get svc --namespace ingress-nginx ingress-nginx-controller  --template="{{range .status.loadBalancer.ingress}}{{.ip}}{{end}}"); [ -z "$external_ip" ] && sleep 10; done; echo "End point ready-" && echo $external_ip; export endpoint=$external_ip
              echo ${endpoint}
              gcloud dns record-sets import -z zona --delete-all-existing /dev/null --project ${PROJECT_ID}
              gcloud dns record-sets transaction start --zone=zona --project ${PROJECT_ID}
              gcloud dns record-sets transaction add ${endpoint} --name=poliformas.com.gt. --ttl=300 --type=A --zone=zona
              gcloud dns record-sets transaction add "poliformas.com.gt." --name="www.poliformas.com.gt." --ttl=300 --type=CNAME --zone=zona
              for db in  $(gcloud sql instances list --project striped-temple-282417 --filter db-instance --format="value(PRIMARY_ADDRESS)")
              do
                export DB=$db
                gcloud dns record-sets transaction add ${DB} --name=db.poliformas.com.gt. --ttl=300 --type=A --zone=zona
              done
              gcloud dns record-sets transaction execute --zone=zona --project ${PROJECT_ID}
            fi
workflows:
  version: 2
  pipeline-principal:
    jobs:
      - test:
          filters:
              branches:
                only:
                  - developer
      - continous_integration_delivery:
          filters:
              branches:
                only:
                  - master
      - continous_deployment:
          requires:
            - continous_integration_delivery
          filters:
              branches:
                only:
                  - master
      - infrastructure_deployment:
          filters:
              branches:
                only:
                  - infrastructure
      - configure_infrastructure:
          requires:
            - infrastructure_deployment
          filters:
              branches:
                only:
                  - infrastructure