version: 2.1
jobs:
  test:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: "Tests backend"
          command: |
            cd ${HOME}/project/code/backend
            docker build -t christianreal/backend-nodejs:${CIRCLE_SHA1} .
            docker run --name service-nodejs --env-file env.list --env DB_PASS=${DB_PASSWORD} -p 5000:5000 -d christianreal/backend-nodejs:${CIRCLE_SHA1}
            docker exec -it service-nodejs npm test
      - run:
          name: "Test Frontend"
          command: |
            cd ${HOME}/project/code/client
            docker build -t christianreal/frontend-vuejs:test1${CIRCLE_SHA1} -f Dockerfile.test . 
  continous_integration_delivery:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - attach_workspace:
            at: /tmp/workspace
      - checkout
      - run:
          name: "Revisar Workspace"
          command: |
            ls /tmp/workspace
      - run:
          name: "Build Image Backend"
          command: |
            cd ${HOME}/project/code/backend
            docker build -t christianreal/backend-nodejs:${CIRCLE_SHA1} . 
      - run:
          name: "Build Image Frontend"
          command: |
            cd ${HOME}/project/code/client
            docker build -t christianreal/frontend-vuejs:${CIRCLE_SHA1} . 
      - run:
          name: "Test Backend"
          command: |
            cd ${HOME}/project/code/backend
            docker run --name service-nodejs --env-file env.list --env DB_PASS=${DB_PASSWORD} -p 5000:5000 -d christianreal/backend-nodejs:${CIRCLE_SHA1}
            docker exec -it service-nodejs npm test 
      - run:
          name: "Push images to registry"
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push christianreal/backend-nodejs:${CIRCLE_SHA1}
            docker push christianreal/frontend-vuejs:${CIRCLE_SHA1}
  continous_deployment:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: "Instalar terraform, Kubeclt, Helm & Crear archivo de credenciales."  
          command: |
            sudo bash deployment/Terraform/script.sh
      - run:
          name: "Configurar Kubectl"
          command: |
            cd ${HOME}/project/deployment/Terraform
            export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-key.json
            export TF_VAR_project_id=${PROJECT_ID}
            export TF_VAR_db_username=${DB_USERNAME}
            export TF_VAR_db_password=${DB_PASSWORD}
            terraform init 
            echo "$(terraform output kubeconfig_data)"  > config
            mkdir -p ~/.kube
            mv config ~/.kube/
      - run:          
          name: "Aplicar manifestos yaml en el cluster K8"
          command: |
            kubectl apply -f deployment/K8/deployments
            kubectl set image deployment/deployment-nodejs nodejs-container=christianreal/backend-nodejs:${CIRCLE_SHA1} --record
            kubectl set image deployment/deployment-vuejs vuejs-container=christianreal/frontend-vuejs:${CIRCLE_SHA1} --record
            kubectl apply -f deployment/K8/services/clusterip
            kubectl apply -f deployment/K8/services/service-ingress.yml
  infrastructure_deployment:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: "Instalar terraform, Kubeclt, Helm & Crear archivo de credenciales."  
          command: |
            sudo bash deployment/Terraform/script.sh
            echo ${CREDENTIALS} > ${HOME}/gcloud-key.json
      - run:
          name: "Desplegar infraestructura con terraform"
          command: |
            cd ${HOME}/project/deployment/Terraform
            export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-key.json
            export TF_VAR_project_id=${PROJECT_ID}
            export TF_VAR_db_username=${DB_USERNAME}
            export TF_VAR_db_password=${DB_PASSWORD}
            terraform init 
            terraform plan -out plan.out
            terraform apply plan.out
            mkdir -p ~/.kube
            ls cluster_k8
            mv cluster_k8/config ~/.kube/
            export KUBECONFIG=~/.kube/config
            echo "$(terraform output cloudsql_instance_ip)" > ${HOME}/project/deployment/TerraformDNS/cloudsql_instance_ip
      - run:
          name: "Instalar ingress controller"
          command: | 
            kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/cloud/deploy.yaml
      - run:
          name: "Configurar certificado SSL en el ingress controller utilizando HELM"
          command: |
            helm repo add jetstack https://charts.jetstack.io
            kubectl apply -f deployment/K8/namespace/ns-cert-manager.yaml
            kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v0.14.1/cert-manager.crds.yaml
            kubectl apply -f deployment/K8/services/letsencrypt-prod.yaml
            kubectl apply -f deployment/K8/configmaps/
            kubectl apply -f deployment/K8/secrets/
            helm upgrade --install cert-manager --namespace cert-manager jetstack/cert-manager --version v0.14.1
      - run:
          name: "Configurar dominios DNS en cloud DNS"
          command: |
            cd ${HOME}/project/deployment/TerraformDNS
            external_ip=""; while [ -z $external_ip ]; do echo "Waiting for end point..."; external_ip=$(kubectl get svc --namespace ingress-nginx ingress-nginx-controller  --template="{{range .status.loadBalancer.ingress}}{{.ip}}{{end}}" --ignore-not-found); [ -z "$external_ip" ] && sleep 10; done; echo "End point ready-" && echo $external_ip; export endpoint=$external_ip         
            export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-key.json
            export TF_VAR_project_id=${PROJECT_ID}
            export TF_VAR_ingress_controller_ip=${endpoint}
            export TF_VAR_cloudsql_instance_ip=`cat cloudsql_instance_ip`
            terraform init 
            terraform plan -out plan.out
            terraform apply plan.out
workflows:
  version: 2
  pipeline-principal:
    jobs:
      - test:
          filters:
              branches:
                only:
                  - developer
      - continous_integration_delivery:
          filters:
              branches:
                only:
                  - master
                  - hotfix
      - continous_deployment:
          requires:
            - continous_integration_delivery
          filters:
              branches:
                only:
                  - master
                  - hotfix
      - infrastructure_deployment:
          filters:
              branches:
                only:
                  - infrastructure