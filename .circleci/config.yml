version: 2.1
jobs:
  test:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: "Test microservicio movimientos"
          command: |
            cd ${HOME}/project/code/microservicio-movimientos
            docker build -t christianreal/backend-nodejs:movimientos-${CIRCLE_SHA1} .
            docker run --name service-nodejs-movimientos --env-file env.list --env DB_PASS=${DB_PASSWORD} -d christianreal/backend-nodejs:movimientos-${CIRCLE_SHA1}
            docker exec -it service-nodejs-movimientos npm test
      - run:
          name: "Test microservicio productos"
          command: |
            cd ${HOME}/project/code/microservicio-productos
            docker build -t christianreal/backend-nodejs:productos-${CIRCLE_SHA1} .
            docker run --name service-nodejs-productos --env-file env.list --env DB_PASS=${DB_PASSWORD} -d christianreal/backend-nodejs:productos-${CIRCLE_SHA1}
            docker exec -it service-nodejs-productos npm test
      - run:
          name: "Test microservicio proveedores"
          command: |
            cd ${HOME}/project/code/microservicio-proveedores
            docker build -t christianreal/backend-nodejs:proveedores-${CIRCLE_SHA1} .
            docker run --name service-nodejs-proveedores --env-file env.list --env DB_PASS=${DB_PASSWORD} -d christianreal/backend-nodejs:proveedores-${CIRCLE_SHA1}
            docker exec -it service-nodejs-proveedores npm test
      - run:
          name: "Test microservicio reportes"
          command: |
            cd ${HOME}/project/code/microservicio-reportes
            docker build -t christianreal/backend-nodejs:reportes-${CIRCLE_SHA1} .
            docker run --name service-nodejs-reportes --env-file env.list --env DB_PASS=${DB_PASSWORD} -d christianreal/backend-nodejs:reportes-${CIRCLE_SHA1}
            docker exec -it service-nodejs-reportes npm test
      - run:
          name: "Test microservicio vendedores"
          command: |
            cd ${HOME}/project/code/microservicio-vendedores
            docker build -t christianreal/backend-nodejs:vendedores-${CIRCLE_SHA1} .
            docker run --name service-nodejs-vendedores --env-file env.list --env DB_PASS=${DB_PASSWORD} -d christianreal/backend-nodejs:vendedores-${CIRCLE_SHA1}
            docker exec -it service-nodejs-vendedores npm test
      - run:
          name: "Test Frontend"
          command: |
            cd ${HOME}/project/code/client
            docker build -t christianreal/frontend-vuejs:test1${CIRCLE_SHA1} -f Dockerfile.test . 
  continous_integration_delivery:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      ######### Build microservices images ##########3
      - run:
          name: "Build microservicio movimientos"
          command: |
            cd ${HOME}/project/code/microservicio-movimientos
            docker build -t christianreal/backend-nodejs:movimientos-${CIRCLE_SHA1} . 
      - run:
          name: "Build microservicio productos"
          command: |
            cd ${HOME}/project/code/microservicio-productos
            docker build -t christianreal/backend-nodejs:productos-${CIRCLE_SHA1} . 
      - run:
          name: "Build microservicio proveedores"
          command: |
            cd ${HOME}/project/code/microservicio-proveedores
            docker build -t christianreal/backend-nodejs:proveedores-${CIRCLE_SHA1} . 
      - run:
          name: "Build microservicio reportes"
          command: |
            cd ${HOME}/project/code/microservicio-reportes
            docker build -t christianreal/backend-nodejs:reportes-${CIRCLE_SHA1} . 
      - run:
          name: "Build microservicio vendedores"
          command: |
            cd ${HOME}/project/code/microservicio-vendedores
            docker build -t christianreal/backend-nodejs:vendedores-${CIRCLE_SHA1} . 
      - run:
          name: "Build & test Image Frontend"
          command: |
            cd ${HOME}/project/code/client
            docker build -t christianreal/frontend-vuejs:${CIRCLE_SHA1} . 
      ############# Test microservices images ##################
      - run:
          name: "Test microservicio movimientos"
          command: |
            cd ${HOME}/project/code/microservicio-movimientos
            docker run --name service-nodejs-movimientos --env-file env.list --env DB_PASS=${DB_PASSWORD} -d christianreal/backend-nodejs:movimientos-${CIRCLE_SHA1}
            docker exec -it service-nodejs-movimientos npm test
      - run:
          name: "Test microservicio productos"
          command: |
            cd ${HOME}/project/code/microservicio-productos
            docker run --name service-nodejs-productos --env-file env.list --env DB_PASS=${DB_PASSWORD} -d christianreal/backend-nodejs:productos-${CIRCLE_SHA1}
            docker exec -it service-nodejs-productos npm test
      - run:
          name: "Test microservicio proveedores"
          command: |
            cd ${HOME}/project/code/microservicio-proveedores
            docker run --name service-nodejs-proveedores --env-file env.list --env DB_PASS=${DB_PASSWORD} -d christianreal/backend-nodejs:proveedores-${CIRCLE_SHA1}
            docker exec -it service-nodejs-proveedores npm test
      - run:
          name: "Test microservicio reportes"
          command: |
            cd ${HOME}/project/code/microservicio-reportes
            docker run --name service-nodejs-reportes --env-file env.list --env DB_PASS=${DB_PASSWORD} -d christianreal/backend-nodejs:reportes-${CIRCLE_SHA1}
            docker exec -it service-nodejs-reportes npm test
      - run:
          name: "Test microservicio vendedores"
          command: |
            cd ${HOME}/project/code/microservicio-vendedores
            docker run --name service-nodejs-vendedores --env-file env.list --env DB_PASS=${DB_PASSWORD} -d christianreal/backend-nodejs:vendedores-${CIRCLE_SHA1}
            docker exec -it service-nodejs-vendedores npm test
      ############ Push images ############################
      - run:
          name: "Push images to registry"
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

            docker push christianreal/backend-nodejs:movimientos-${CIRCLE_SHA1}
            docker push christianreal/backend-nodejs:productos-${CIRCLE_SHA1}
            docker push christianreal/backend-nodejs:proveedores-${CIRCLE_SHA1}
            docker push christianreal/backend-nodejs:reportes-${CIRCLE_SHA1}
            docker push christianreal/backend-nodejs:vendedores-${CIRCLE_SHA1}

            docker push christianreal/frontend-vuejs:${CIRCLE_SHA1}
  continous_deployment:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: "Instalar terraform, Kubeclt, Helm & Crear archivo de credenciales."  
          command: |
            sudo bash deployment/Terraform/script.sh
      - run:
          name: "Configurar Kubectl"
          command: |
            export DB_DATABASE=${DB_DATABASE}
            export DB_HOST=${DB_HOST}
            export DB_USER=${DB_USERNAME}
            export DB_PASS=${DB_PASSWORD}
            export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-key.json
            export TF_VAR_project_id=${PROJECT_ID}
            export TF_VAR_db_username=${DB_USERNAME}
            export TF_VAR_db_password=${DB_PASSWORD}
            export TF_VAR_service_account_name=${SERVICE_ACCOUNT_NAME}
            export VAR_GOOGLE_COMPUTE_ZONE=${GOOGLE_COMPUTE_ZONE}
            cd ${HOME}/project/deployment/Terraform
            echo ${CREDENTIALS} > ${HOME}/gcloud-key.json
            terraform init
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-key.json
            gcloud config set project $TF_VAR_project_id
            gcloud container clusters get-credentials $( terraform output --raw cluster_name ) --zone=${VAR_GOOGLE_COMPUTE_ZONE}
      - run:          
          name: "Aplicar manifestos yaml en el cluster K8"
          command: |
            cd ${HOME}/project
            kubectl apply -f deployment/K8/deployments
            
            kubectl set image deployment/deployment-nodejs-movimientos nodejs-container=christianreal/backend-nodejs:movimientos-${CIRCLE_SHA1} --record
            kubectl set image deployment/deployment-nodejs-productos nodejs-container=christianreal/backend-nodejs:productos-${CIRCLE_SHA1} --record
            kubectl set image deployment/deployment-nodejs-proveedores nodejs-container=christianreal/backend-nodejs:proveedores-${CIRCLE_SHA1} --record
            kubectl set image deployment/deployment-nodejs-reportes nodejs-container=christianreal/backend-nodejs:reportes-${CIRCLE_SHA1} --record
            kubectl set image deployment/deployment-nodejs-vendedores nodejs-container=christianreal/backend-nodejs:vendedores-${CIRCLE_SHA1} --record

            kubectl set image deployment/deployment-vuejs vuejs-container=christianreal/frontend-vuejs:${CIRCLE_SHA1} --record
            kubectl apply -f deployment/K8/services/clusterip
  infrastructure_deployment:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: "Instalar terraform, Kubeclt, Helm & Crear archivo de credenciales."  
          command: |
            sudo bash deployment/Terraform/script.sh
            echo ${CREDENTIALS} > ${HOME}/gcloud-key.json
      - run:
          name: "Desplegar infraestructura con terraform"
          command: |
            cd ${HOME}/project/deployment/Terraform
            export DB_DATABASE=${DB_DATABASE}
            export DB_HOST=${DB_HOST}
            export DB_USER=${DB_USERNAME}
            export DB_PASS=${DB_PASSWORD}
            export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-key.json
            export TF_VAR_project_id=${PROJECT_ID}
            export TF_VAR_db_username=${DB_USERNAME}
            export TF_VAR_db_password=${DB_PASSWORD}
            export TF_VAR_service_account_name=${SERVICE_ACCOUNT_NAME}
            export VAR_GOOGLE_COMPUTE_ZONE=${GOOGLE_COMPUTE_ZONE}
            echo ${CREDENTIALS} > ${HOME}/gcloud-key.json
            terraform init 
            terraform plan -out plan.out
            terraform apply plan.out

            gcloud auth activate-service-account --key-file=${HOME}/gcloud-key.json
            gcloud config set project $TF_VAR_project_id
            gcloud container clusters get-credentials $( terraform output --raw cluster_name ) --zone=${VAR_GOOGLE_COMPUTE_ZONE}            
            echo "$(terraform output cloudsql_instance_ip)" > ${HOME}/project/deployment/TerraformDNS/cloudsql_instance_ip
      - run:
          name: "Instalar ingress controller"
          command: | 
            helm repo add nginx-stable https://helm.nginx.com/stable
            helm upgrade --install nginx-ing nginx-stable/nginx-ingress
      - run:
          name: "Configurar certificado SSL en el ingress controller utilizando HELM"
          command: |
            cd ${HOME}/project/
            kubectl apply -f deployment/K8/namespace
            kubectl apply -f https://github.com/jetstack/cert-manager/releases/latest/download/cert-manager.yaml
            sleep 60
            kubectl apply -f deployment/K8/services/letsencrypt-prod.yaml
            SecretoExiste=$( kubectl get secrets --no-headers=true | grep -i "secretos-proyecto" | wc -l ) 
            if [ $SecretoExiste -eq 0 ]; then kubectl create secret generic secretos-proyecto --from-literal=DB_DATABASE=$DB_DATABASE --from-literal=DB_HOST=$DB_HOST --from-literal=DB_USER=$DB_USER --from-literal=DB_PASS=$DB_PASS; fi 
      - run:
          name: "Instalar prometheus y grafana utilizando HELM"
          command: |
            cd ${HOME}/project/
            helm repo add grafana https://grafana.github.io/helm-charts
            helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
            helm upgrade --install prometheus prometheus-community/prometheus --namespace prometheus
            helm upgrade --install grafana grafana/grafana --namespace grafana
            kubectl apply -f deployment/K8/services/ingress/ingress-principal.yml
            kubectl apply -f deployment/K8/services/ingress/ingress-grafana.yaml -n grafana
            kubectl apply -f deployment/K8/services/ingress/ingress-prometheus.yaml -n prometheus  
      - run:
          name: "Configurar dominios DNS en cloud DNS"
          command: |
            cd ${HOME}/project/deployment/TerraformDNS
            external_ip=""; while [ -z $external_ip ]; do echo "Waiting for end point..."; external_ip=$(kubectl get svc --namespace default nginx-ing-nginx-ingress  --template="{{range .status.loadBalancer.ingress}}{{.ip}}{{end}}" --ignore-not-found); [ -z "$external_ip" ] && sleep 10; done; echo "End point ready-" && echo $external_ip; export endpoint=$external_ip         
            export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-key.json
            export TF_VAR_project_id=${PROJECT_ID}
            export TF_VAR_ingress_controller_ip=${endpoint}
            export TF_VAR_cloudsql_instance_ip=`cat cloudsql_instance_ip`
            terraform init 
            terraform plan -out plan.out
            terraform apply plan.out
workflows:
  version: 2
  pipeline-principal:
    jobs:
      - test:
          filters:
              branches:
                only:
                  - developer
      - continous_integration_delivery:
          filters:
              branches:
                only:
                  - master
                  - hotfix
      - continous_deployment:
          requires:
            - continous_integration_delivery
          filters:
              branches:
                only:
                  - master
                  - hotfix
      - infrastructure_deployment:
          filters:
              branches:
                only:
                  - infrastructure